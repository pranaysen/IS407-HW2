{
  "hash": "717939fdf646539fa1ae5b4a71732a13",
  "result": {
    "markdown": "---\ntitle: \"Building Up to an Effective Visualization of the Generic Ballot\"\nauthor: \"Pranay Sen\"\ndate: \"2023-11-05\"\ncategories: [politics, data science, data visualization]\n---\n\n\n![](dvsr.webp)\n\n(Image taken from [Vox](https://www.vox.com/policy-and-politics/2018/12/18/18139556/republicans-democrats-partisanship-ideology-philosophy-psychology-marc-hetherington))\n\nI've been fascinated by politics for the past couple years now, and luckily enough, politics is an awesome area to get some data science skills! With new polls releasing all the time and political forecasts changing by the minute, there's a wealth of data on the internet that can show you how public sentiment in politics has changed over time. Gallup has been publishing their public polls since 1935!\n\nIn this post, we'll be tracking the generic ballot over time. The generic ballot refers to whether Americans would prefer to have a generic Republican or a generic Democrat in office. This is a great way to see how political ideologies gain and lose popularity over time! FiveThirtyEight has a dataset tracking the high and low points each day for each party on the generic ballot. We'll be using that dataset in our exploration today. You can find the full generic ballot dataset [here](https://data.fivethirtyeight.com/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nballot <- read.csv(\"https://projects.fivethirtyeight.com/polls/data/generic_ballot_averages.csv\")\nhead(ballot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    candidate pct_estimate       lo       hi       date   election cycle\n1   Democrats     43.94449 39.33347 48.55550 2017-04-15 2018-11-06  2018\n2 Republicans     39.54969 34.93867 44.16071 2017-04-15 2018-11-06  2018\n3   Democrats     43.74965 39.14054 48.35876 2017-04-16 2018-11-06  2018\n4 Republicans     39.59254 34.98343 44.20165 2017-04-16 2018-11-06  2018\n5   Democrats     43.74553 39.13599 48.35508 2017-04-17 2018-11-06  2018\n6 Republicans     39.58794 34.97840 44.19749 2017-04-17 2018-11-06  2018\n```\n:::\n:::\n\n\nThis dataset has 3,480 observations, and two observations are needed for one day's worth of data. The first observation per day shows the upper bound (hi), lower bound (lo), and estimated percentage of Americans who want Democrats in office. The second observation per day shows the same information for Republicans. Let's try to graph this data as best we can. The first thing we should do is convert the date column into something a little more graph-friendly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballot <- ballot %>% mutate(date = as.Date(date, format = \"%Y-%m-%d\"))\nhead(ballot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    candidate pct_estimate       lo       hi       date   election cycle\n1   Democrats     43.94449 39.33347 48.55550 2017-04-15 2018-11-06  2018\n2 Republicans     39.54969 34.93867 44.16071 2017-04-15 2018-11-06  2018\n3   Democrats     43.74965 39.14054 48.35876 2017-04-16 2018-11-06  2018\n4 Republicans     39.59254 34.98343 44.20165 2017-04-16 2018-11-06  2018\n5   Democrats     43.74553 39.13599 48.35508 2017-04-17 2018-11-06  2018\n6 Republicans     39.58794 34.97840 44.19749 2017-04-17 2018-11-06  2018\n```\n:::\n:::\n\n\nGgplot2 recognizes dates when formatted as the date data type - not as characters. This should make graphing a ton easier for us! Let's see how the Democrats do over time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x = date, y = pct_estimate)) +\n  geom_line(color = \"blue\") + \n  scale_x_date(date_breaks = \"6 months\", date_labels =  \"%b %Y\")  +\n  ylab(\"Democrats' Generic Ballot Percentage\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAwesome! Let's do the same for Republicans:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x = date, y = pct_estimate)) +\n  geom_line(color = \"red\") + \n  scale_x_date(date_breaks = \"6 months\", date_labels =  \"%b %Y\") +\n  ylab(\"Republicans' Generic Ballot Percentage\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThese graphs are decent when presented on their own, but they don't mean too much without context. Let's try putting both plots on the same graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x = date, y = pct_estimate), color = \"blue\") +\n  geom_line(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x = date, y = pct_estimate), color = \"red\") + \n  scale_x_date(date_breaks = \"6 months\", date_labels =  \"%b %Y\") +\n  ylab(\"Party's Generic Ballot Percentage\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nJust at a glance, you get so much more information from this one graph! You can see how Democrats fare versus Republicans concisely and clearly in one graph.\n\nLet's say, for the sake of example, that we didn't trust FiveThirtyEight's estimate of how each party is doing. We could plot the high and low points of each party on each day alongside FiveThirtyEight's estimate to see the range of possible estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x = date, y = pct_estimate), color = \"blue\") +\n  geom_ribbon(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x= date, y = pct_estimate, ymin = lo, ymax = hi), fill = \"blue\", alpha = 0.2) +\n  geom_line(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x = date, y = pct_estimate), color = \"red\") + \n  geom_ribbon(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x= date, y = pct_estimate, ymin = lo, ymax = hi), fill = \"red\", alpha = 0.2) +\n  scale_x_date(date_breaks = \"6 months\", date_labels =  \"%b %Y\") +\n  ylab(\"Party's Generic Ballot Percentage\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis reveals a lot more than you may initially think! If FiveThirtyEight's estimate was off on a particular day, we can see valid error bounds for this estimate. In the areas shaded, purple, it could be that the opposite party is ahead on the generic ballot!\n\nOne last thing we can do to make this visualization really complete is to add a legend to this plot. While we may intuit that Democrats are represented with blue and Republicans with red, we should make that assumption explicit. We should not leave something like this up to interpretation when our goal is to visualize data cleanly and effectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlegend_colors <- c(\"Democrats\" = \"blue\", \"Republicans\" = \"red\")\n\nggplot(ballot) +\n  geom_line(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x = date, y = pct_estimate, color = \"Democrats\")) +\n  geom_ribbon(data = ballot %>% filter(candidate == \"Democrats\"), mapping = aes(x= date, y = pct_estimate, ymin = lo, ymax = hi), fill = \"blue\", alpha = 0.2) +\n  geom_line(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x = date, y = pct_estimate, color = \"Republicans\")) + \n  geom_ribbon(data = ballot %>% filter(candidate == \"Republicans\"), mapping = aes(x= date, y = pct_estimate, ymin = lo, ymax = hi), fill = \"red\", alpha = 0.2) +\n  scale_x_date(date_breaks = \"6 months\", date_labels =  \"%b %Y\") +\n  xlab(\"Date\") +\n  ylab(\"Party's Generic Ballot Percentage\") +\n  labs(color = \"Generic Candidate Party\") +\n  scale_color_manual(values = legend_colors) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nAnd there we have it! An effective visualization of the generic ballot over time, complete with error bands. I could spend ages talking about the story this graph tells, but that requires way more political insight than what I can provide on this data science blog. Hope you enjoyed!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}